import { useState, useEffect } from 'react';
import { DELIVERY_COST, DELIVERY_THRESHOLD } from '../utils/constants';

export const useCart = () => {
  const [cart, setCart] = useState([]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–ø—Ä–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∞–≤–∫–æ–π
  useEffect(() => {
    const hasProducts = cart.some(item => !item.isDelivery);
    const hasDelivery = cart.some(item => item.isDelivery);
    
    if (hasProducts && !hasDelivery) {
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞—Ç–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      const deliveryItem = {
        id: 'delivery',
        name: '–î–æ—Å—Ç–∞–≤–∫–∞',
        price: DELIVERY_COST,
        quantity: 1,
        isDelivery: true,
        imageUrl: 'üöö'
      };
      setCart(prev => [...prev, deliveryItem]);
    } else if (!hasProducts && hasDelivery) {
      // –£–±–∏—Ä–∞–µ–º –¥–æ—Å—Ç–∞–≤–∫—É –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤
      setCart(prev => prev.filter(item => !item.isDelivery));
    }
  }, [cart]);

  // –ó–ê–©–ò–¢–ê: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±–∏—Ä–∞–µ–º flash-—Ç–æ–≤–∞—Ä—ã –ø—Ä–∏ —Å–Ω–∏–∂–µ–Ω–∏–∏ —Å—É–º–º—ã
  useEffect(() => {
    const regularSubtotal = cart
      .filter(item => !item.isDelivery && !item.isFlashOffer)
      .reduce((sum, item) => sum + item.price * item.quantity, 0);
    
    const hasFlashItems = cart.some(item => item.isFlashOffer);
    
    // –ï—Å–ª–∏ —Å—É–º–º–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —É–ø–∞–ª–∞ –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞, —É–±–∏—Ä–∞–µ–º –≤—Å–µ flash-—Ç–æ–≤–∞—Ä—ã
    if (regularSubtotal < DELIVERY_THRESHOLD && hasFlashItems) {
      setCart(prev => prev.filter(item => !item.isFlashOffer));
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      console.warn('Flash-—Ç–æ–≤–∞—Ä—ã —É–¥–∞–ª–µ–Ω—ã: —Å—É–º–º–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞');
    }
  }, [cart]);

  const addToCart = (product) => {
    setCart(prev => {
      const existing = prev.find(item => item.id === product.id);
      if (existing) {
        return prev.map(item =>
          item.id === product.id
            ? { ...item, quantity: item.quantity + 1 }
            : item
        );
      }
      return [...prev, { ...product, quantity: 1 }];
    });
  };

  const updateQuantity = (id, newQuantity) => {
    if (newQuantity <= 0) {
      removeFromCart(id);
      return;
    }
    setCart(prev =>
      prev.map(item =>
        item.id === id ? { ...item, quantity: newQuantity } : item
      )
    );
  };

  const removeFromCart = (id) => {
    setCart(prev => prev.filter(item => item.id !== id));
  };

  const activateFreeDelivery = () => {
    // –£–±–∏—Ä–∞–µ–º –ø–ª–∞—Ç–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É
    setCart(prev => prev.filter(item => item.id !== 'delivery'));
    
    // –î–æ–±–∞–≤–ª—è–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É
    const freeDeliveryItem = {
      id: 'free_delivery',
      name: '–î–æ—Å—Ç–∞–≤–∫–∞ (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)',
      price: 0,
      originalPrice: DELIVERY_COST,
      quantity: 1,
      isDelivery: true,
      isFreeDelivery: true,
      imageUrl: 'üöö'
    };
    addToCart(freeDeliveryItem);
  };

  // –†–∞—Å—á—ë—Ç—ã
  const subtotal = cart
    .filter(item => !item.isDelivery)
    .reduce((sum, item) => sum + item.price * item.quantity, 0);

  // –°—É–º–º–∞ —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–±–µ–∑ flash-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)
  const regularSubtotal = cart
    .filter(item => !item.isDelivery && !item.isFlashOffer)
    .reduce((sum, item) => sum + item.price * item.quantity, 0);
  
  const deliveryItem = cart.find(item => item.isDelivery);
  const deliveryCost = deliveryItem ? deliveryItem.price : 0;
  
  const cartItemsCount = cart.reduce((sum, item) => sum + item.quantity, 0);

  const calculateDiscount = (discounts) => {
    // –°–∫–∏–¥–∫–∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫ –æ–±—ã—á–Ω—ã–º —Ç–æ–≤–∞—Ä–∞–º
    const currentDiscount = discounts
      .filter(d => d.minTotal <= regularSubtotal)
      .sort((a, b) => b.minTotal - a.minTotal)[0];
    
    return currentDiscount ? Math.round(regularSubtotal * currentDiscount.discountPercent / 100) : 0;
  };

  // –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
  const canPlaceOrder = () => {
    const hasFlashItems = cart.some(item => item.isFlashOffer);
    const hasRegularItems = cart.some(item => !item.isDelivery && !item.isFlashOffer);
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å flash-—Ç–æ–≤–∞—Ä—ã, –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏ –æ–±—ã—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
    if (hasFlashItems && regularSubtotal < DELIVERY_THRESHOLD) {
      return {
        canOrder: false,
        reason: `–î–ª—è –∑–∞–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ —Å–∫–∏–¥–∫–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—ã—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—É–º–º—É –æ—Ç ${DELIVERY_THRESHOLD}‚ÇΩ`
      };
    }
    
    // –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä (–Ω–µ —Å—á–∏—Ç–∞—è –¥–æ—Å—Ç–∞–≤–∫—É)
    if (!hasRegularItems && !hasFlashItems) {
      return {
        canOrder: false,
        reason: '–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É'
      };
    }
    
    return {
      canOrder: true,
      reason: null
    };
  };

  return {
    cart,
    addToCart,
    updateQuantity,
    removeFromCart,
    activateFreeDelivery,
    subtotal,
    regularSubtotal,
    deliveryCost,
    cartItemsCount,
    calculateDiscount,
    canPlaceOrder
  };
};
