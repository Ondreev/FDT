import { useState, useEffect } from 'react';

const API_URL = 'https://script.google.com/macros/s/AKfycbwpgkiVZN5JwPdSYj-jLVZHZ_A5sw8P6PV4QXR7DJWchwP-19z31WUjcv7QRaHMAazCxg/exec';

const formatNumber = (num) => {
  return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ' ');
};

// ‚úÖ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
const formatDate = (dateStr) => {
  if (!dateStr) return '–ù–µ—Ç –≤—Ä–µ–º–µ–Ω–∏';
  
  try {
    // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —Å—Ç—Ä–æ–∫–∞ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (25.07.2025 19:51:45), –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
    if (typeof dateStr === 'string' && dateStr.includes('.') && dateStr.includes(':') && !dateStr.includes('T')) {
      return dateStr;
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ ISO —Ñ–æ—Ä–º–∞—Ç (2025-07-27T12:26:03.000Z) –∏–ª–∏ Date –æ–±—ä–µ–∫—Ç, –ø–∞—Ä—Å–∏–º
    const date = new Date(dateStr);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤–∞–ª–∏–¥–Ω–∞
    if (isNaN(date.getTime())) {
      return String(dateStr); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear();
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    const seconds = String(date.getSeconds()).padStart(2, '0');
    
    return `${day}.${month}.${year} ${hours}:${minutes}:${seconds}`;
    
  } catch (error) {
    console.error('Error formatting date:', error);
    return String(dateStr);
  }
};

// ‚úÖ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
const calculateAverageTime = (orders) => {
  const todayMoscow = (() => {
    const now = new Date();
    const moscowOffset = 3 * 60;
    const localOffset = now.getTimezoneOffset();
    const moscowTime = new Date(now.getTime() + (moscowOffset + localOffset) * 60000);
    return moscowTime.toISOString().split('T')[0];
  })();

  const completedToday = orders.filter(order => {
    if (!order.date) return false;
    try {
      let orderDate;
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã
      if (typeof order.date === 'string' && order.date.includes('.') && !order.date.includes('T')) {
        // –§–æ—Ä–º–∞—Ç: "25.07.2025 19:51:45"
        const dateParts = order.date.split(' ')[0].split('.');
        if (dateParts.length === 3) {
          orderDate = `${dateParts[2]}-${dateParts[1]}-${dateParts[0]}`; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ YYYY-MM-DD
        }
      } else {
        // ISO —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ Date –æ–±—ä–µ–∫—Ç
        const dateObj = new Date(order.date);
        orderDate = dateObj.toISOString().split('T')[0];
      }
      
      return orderDate === todayMoscow && ['done', 'archived'].includes(order.status);
    } catch (error) {
      return false;
    }
  });

  if (completedToday.length === 0) return null;

  // –°–∏–º—É–ª—è—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤ –ë–î)
  const totalMinutes = completedToday.reduce((sum, order) => {
    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è 25-35 –º–∏–Ω—É—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    const estimatedMinutes = Math.random() * 10 + 25;
    return sum + estimatedMinutes;
  }, 0);

  const averageMinutes = Math.round(totalMinutes / completedToday.length);
  return { averageMinutes, completedCount: completedToday.length };
};

// ‚úÖ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –∫–æ–º–ø–æ–Ω–µ–Ω—Ç OrderTimer
const OrderTimer = ({ orderDate, status }) => {
  const [elapsed, setElapsed] = useState(0);
  const [isRunning, setIsRunning] = useState(!['done', 'archived'].includes(status));

  useEffect(() => {
    if (!orderDate) return;
    
    let startTime;
    try {
      if (typeof orderDate === 'string' && orderDate.includes('.') && orderDate.includes(':') && !orderDate.includes('T')) {
        // –§–æ—Ä–º–∞—Ç: "25.07.2025 19:51:45"
        const [datePart, timePart] = orderDate.split(' ');
        const [day, month, year] = datePart.split('.');
        const [hours, minutes, seconds] = timePart.split(':');
        startTime = new Date(year, month - 1, day, hours, minutes, seconds).getTime();
      } else {
        // ISO —Ñ–æ—Ä–º–∞—Ç (2025-07-27T12:26:03.000Z) –∏–ª–∏ Date –æ–±—ä–µ–∫—Ç
        startTime = new Date(orderDate).getTime();
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
      if (isNaN(startTime)) {
        console.error('Invalid date:', orderDate);
        return;
      }
    } catch (error) {
      console.error('Error parsing date:', error);
      return;
    }
    
    const updateTimer = () => {
      const now = Date.now();
      const elapsedMs = now - startTime;
      setElapsed(Math.floor(elapsedMs / 1000)); // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    };

    updateTimer(); // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ

    let interval;
    if (isRunning) {
      interval = setInterval(updateTimer, 1000);
    }

    return () => {
      if (interval) clearInterval(interval);
    };
  }, [orderDate, isRunning]);

  useEffect(() => {
    setIsRunning(!['done', 'archived'].includes(status));
  }, [status]);

  const formatTime = (seconds) => {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;
    
    if (hours > 0) {
      return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    }
    return `${minutes}:${secs.toString().padStart(2, '0')}`;
  };

  const isOverdue = elapsed > 1800 && isRunning; // 30 –º–∏–Ω—É—Ç = 1800 —Å–µ–∫—É–Ω–¥
  const isCritical = elapsed > 2700 && isRunning; // 45 –º–∏–Ω—É—Ç = –∫—Ä–∏—Ç–∏—á–Ω–æ

  return (
    <div style={{
      display: 'inline-flex',
      alignItems: 'center',
      gap: '0.5rem',
      padding: '0.3rem 0.7rem',
      borderRadius: '12px',
      fontSize: '0.9rem',
      fontWeight: 'bold',
      fontFamily: 'monospace',
      background: isCritical 
        ? '#ff1744' 
        : isOverdue 
        ? '#ff9800' 
        : isRunning 
        ? '#4caf50' 
        : '#9e9e9e',
      color: 'white',
      animation: isOverdue && isRunning ? 'pulse 1.5s infinite' : 'none',
      boxShadow: isOverdue ? '0 0 10px rgba(255, 87, 34, 0.5)' : 'none'
    }}>
      <span>{isRunning ? '‚è±Ô∏è' : '‚èπÔ∏è'}</span>
      <span>{formatTime(elapsed)}</span>
      
      <style>
        {`
          @keyframes pulse {
            0%, 100% { 
              transform: scale(1); 
              box-shadow: 0 0 10px rgba(255, 87, 34, 0.5);
            }
            50% { 
              transform: scale(1.05); 
              box-shadow: 0 0 20px rgba(255, 87, 34, 0.8);
            }
          }
        `}
      </style>
    </div>
  );
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
const normalizePhoneNumber = (phone) => {
  if (!phone && phone !== 0) return null;
  
  const phoneStr = String(phone);
  const cleanPhone = phoneStr.replace(/[^\d+]/g, '');
  
  if (!cleanPhone) return null;
  
  // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –ª–∏—à–Ω–∏—Ö console.log
  const countryCodes = {
    '7': '+7', '375': '+375', '380': '+380', '994': '+994', '374': '+374',
    '995': '+995', '996': '+996', '373': '+373', '992': '+992', '993': '+993',
    '998': '+998', '371': '+371', '372': '+372', '370': '+370'
  };
  
  if (cleanPhone.startsWith('+')) {
    for (const [code, fullCode] of Object.entries(countryCodes)) {
      if (cleanPhone.startsWith(`+${code}`) && cleanPhone.length >= code.length + 10) {
        return cleanPhone;
      }
    }
    return cleanPhone;
  }
  
  if (cleanPhone.startsWith('8') && cleanPhone.length === 11) {
    return '+7' + cleanPhone.substring(1);
  }
  
  if (cleanPhone.startsWith('7') && cleanPhone.length === 11) {
    return '+' + cleanPhone;
  }
  
  for (const [code, fullCode] of Object.entries(countryCodes)) {
    if (cleanPhone.startsWith(code) && cleanPhone.length >= code.length + 9) {
      return '+' + cleanPhone;
    }
  }
  
  if (cleanPhone.length === 10) {
    return '+7' + cleanPhone;
  }
  
  return '+7' + cleanPhone;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è WhatsApp —Å—Å—ã–ª–∫–∏
const createWhatsAppLink = (phone, orderId) => {
  if (!phone && phone !== 0) return null;
  if (!orderId) return null;
  
  const normalizedPhone = normalizePhoneNumber(phone);
  if (!normalizedPhone) return null;
  
  const whatsappPhone = normalizedPhone.replace('+', '');
  const message = `üòä –î–æ–±—Ä—ã–π –¥–µ–Ω—å! –≠—Ç–æ –∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞, –ø–æ –ø–æ–≤–æ–¥—É –í–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ #${orderId} üçï‚ú®`;
  
  return `https://wa.me/${whatsappPhone}?text=${encodeURIComponent(message)}`;
};

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è fetch —Å fallback –Ω–∞ JSONP
const safeFetch = async (url, options = {}) => {
  try {
    // –ü—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π fetch
    const response = await fetch(url, {
      ...options,
      mode: 'cors'
    });
    
    if (response.ok) {
      return response;
    }
    throw new Error(`HTTP ${response.status}`);
  } catch (error) {
    console.warn('Fetch failed, trying JSONP:', error.message);
    
    // Fallback –Ω–∞ JSONP —Ç–æ–ª—å–∫–æ –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤
    if (!options.method || options.method === 'GET') {
      return await fetchViaJSONP(url);
    }
    
    throw new Error('Request failed. Check your internet connection.');
  }
};

// JSONP —Ñ—É–Ω–∫—Ü–∏—è (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è)
const fetchViaJSONP = (url) => {
  return new Promise((resolve, reject) => {
    const callbackName = 'jsonp_' + Date.now() + '_' + Math.random().toString(36).substr(2, 5);
    const script = document.createElement('script');
    
    window[callbackName] = (data) => {
      resolve({ 
        ok: true, 
        json: () => Promise.resolve(data) 
      });
      cleanup();
    };
    
    const cleanup = () => {
      if (script && script.parentNode) {
        document.head.removeChild(script);
      }
      if (window[callbackName]) {
        delete window[callbackName];
      }
    };
    
    script.onerror = () => {
      reject(new Error('JSONP request failed'));
      cleanup();
    };
    
    const separator = url.includes('?') ? '&' : '?';
    script.src = url + separator + 'callback=' + callbackName;
    document.head.appendChild(script);
    
    // –¢–∞–π–º–∞—É—Ç 10 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      if (window[callbackName]) {
        reject(new Error('Request timeout'));
        cleanup();
      }
    }, 10000);
  });
};

const AdminLogin = ({ onLoginSuccess }) => {
  const [password, setPassword] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!password.trim()) {
      setError('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å');
      return;
    }

    setIsLoading(true);
    setError('');

    try {
      const response = await safeFetch(`${API_URL}?action=getAdmins&t=${Date.now()}`);
      const admins = await response.json();
      
      const admin = admins.find(admin => 
        admin.passwordHash && admin.passwordHash.trim() === password.trim()
      );
      
      if (admin) {
        onLoginSuccess(admin);
      } else {
        setError('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
      }
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
    }

    setIsLoading(false);
  };

  return (
    <div style={{
      minHeight: '100vh',
      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      padding: '20px'
    }}>
      <div style={{
        background: 'white',
        padding: '2rem',
        borderRadius: '20px',
        boxShadow: '0 20px 40px rgba(0,0,0,0.1)',
        width: '100%',
        maxWidth: '400px',
        textAlign: 'center'
      }}>
        <div style={{ fontSize: '3rem', marginBottom: '1rem' }}>üëë</div>
        <h1 style={{ fontSize: '1.8rem', fontWeight: 'bold', color: '#2c1e0f', marginBottom: '0.5rem' }}>
          –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
        </h1>
        <p style={{ color: '#666', marginBottom: '2rem' }}>
          –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ë–æ—Å—Å!
        </p>

        <form onSubmit={handleSubmit}>
          <div style={{ marginBottom: '1.5rem', textAlign: 'left' }}>
            <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: 'bold', color: '#333' }}>
              –ü–∞—Ä–æ–ª—å
            </label>
            <input
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å..."
              style={{
                width: '100%',
                padding: '1rem',
                border: '2px solid #e0e0e0',
                borderRadius: '12px',
                fontSize: '1rem',
                outline: 'none',
                boxSizing: 'border-box'
              }}
            />
          </div>

          {error && (
            <div style={{
              background: '#ffebee',
              color: '#c62828',
              padding: '0.75rem',
              borderRadius: '8px',
              marginBottom: '1rem',
              fontSize: '0.9rem'
            }}>
              {error}
            </div>
          )}

          <button
            type="submit"
            disabled={isLoading}
            style={{
              width: '100%',
              padding: '1rem',
              background: isLoading 
                ? 'linear-gradient(135deg, #ccc, #999)' 
                : 'linear-gradient(135deg, #667eea, #764ba2)',
              color: 'white',
              border: 'none',
              borderRadius: '12px',
              fontSize: '1.1rem',
              fontWeight: 'bold',
              cursor: isLoading ? 'not-allowed' : 'pointer',
              transition: 'all 0.2s ease',
              boxShadow: '0 4px 12px rgba(102, 126, 234, 0.3)'
            }}
          >
            {isLoading ? 'üîê –ü—Ä–æ–≤–µ—Ä—è—é...' : 'üöÄ –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É'}
          </button>
        </form>
      </div>
    </div>
  );
};

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∫–æ–º–ø–æ–Ω–µ–Ω—Ç OrderCard
const OrderCard = ({ order, statusLabels, onStatusChange }) => {
  const [isExpanded, setIsExpanded] = useState(false);
  const [isUpdating, setIsUpdating] = useState(false);

  const statusInfo = statusLabels.find(s => s.status === order.status) || 
    { label: order.status, color: '#999' };

  const products = JSON.parse(order.products || '[]');
  const isDone = order.status === 'done';
  const isArchived = order.status === 'archived';

  const handleStatusChange = async (newStatus) => {
    setIsUpdating(true);
    await onStatusChange(order.orderId, newStatus);
    setIsUpdating(false);
  };

  return (
    <div style={{
      background: 'white',
      borderRadius: '16px',
      padding: '1.5rem',
      marginBottom: '1rem',
      boxShadow: '0 4px 12px rgba(0,0,0,0.1)',
      border: isDone ? '2px solid #4caf50' : isArchived ? '2px solid #999' : '1px solid #e0e0e0',
      position: 'relative'
    }}>
      {(isDone || isArchived) && (
        <div style={{
          position: 'absolute',
          top: '-10px',
          right: '-10px',
          background: isDone ? '#4caf50' : '#999',
          borderRadius: '50%',
          width: '40px',
          height: '40px',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          fontSize: '1.5rem',
          color: 'white',
          boxShadow: '0 4px 12px rgba(76, 175, 80, 0.3)'
        }}>
          ‚úì
        </div>
      )}

      <div style={{
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        marginBottom: '1rem',
        cursor: 'pointer'
      }}
      onClick={() => setIsExpanded(!isExpanded)}
      >
        <div>
          <div style={{
            fontSize: '1.2rem',
            fontWeight: 'bold',
            color: '#2c1e0f',
            marginBottom: '0.25rem',
            display: 'flex',
            alignItems: 'center',
            gap: '1rem',
            flexWrap: 'wrap'
          }}>
            <span>–ó–∞–∫–∞–∑ #{order.orderId}</span>
            {/* ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ date –≤–º–µ—Å—Ç–æ truedate */}
            {order.date ? <OrderTimer orderDate={order.date} status={order.status} /> : null}
          </div>
          <div style={{
            fontSize: '0.9rem',
            color: '#666'
          }}>
            {/* ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ date –≤–º–µ—Å—Ç–æ truedate */}
            {order.date ? formatDate(order.date) : '–ù–µ—Ç –≤—Ä–µ–º–µ–Ω–∏'} ‚Ä¢ {order.customerName}
          </div>
        </div>
        <div style={{
          background: statusInfo.color,
          color: 'white',
          padding: '0.5rem 1rem',
          borderRadius: '20px',
          fontSize: '0.9rem',
          fontWeight: 'bold'
        }}>
          {statusInfo.label}
        </div>
      </div>

      <div style={{
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        marginBottom: isExpanded ? '1.5rem' : '0'
      }}>
        <div style={{
          fontSize: '1.1rem',
          fontWeight: 'bold',
          color: '#2c1e0f'
        }}>
          –ò—Ç–æ–≥–æ: {formatNumber(order.total)} ‚ÇΩ
        </div>
        <div style={{
          fontSize: '0.9rem',
          color: '#666'
        }}>
          {products.length} —Ç–æ–≤–∞—Ä{products.length > 1 ? '–∞' : ''}
        </div>
      </div>

      {isExpanded && (
        <div style={{
          borderTop: '1px solid #f0f0f0',
          paddingTop: '1.5rem'
        }}>
          <div style={{ marginBottom: '1.5rem' }}>
            <h4 style={{
              fontSize: '1rem',
              fontWeight: 'bold',
              color: '#2c1e0f',
              marginBottom: '0.75rem'
            }}>
              üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã
            </h4>
            <div style={{ fontSize: '0.9rem', color: '#666', lineHeight: '1.6' }}>
              <div><strong>–ö–ª–∏–µ–Ω—Ç:</strong> {order.customerName}</div>
              <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', flexWrap: 'wrap' }}>
                <span><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong></span>
                {(() => {
                  try {
                    const normalizedPhone = normalizePhoneNumber(order.phone);
                    const whatsappLink = createWhatsAppLink(order.phone, order.orderId);
                    
                    if (whatsappLink && normalizedPhone) {
                      return (
                        <a
                          href={whatsappLink}
                          target="_blank"
                          rel="noopener noreferrer"
                          onClick={(e) => e.stopPropagation()}
                          style={{
                            color: '#25D366',
                            textDecoration: 'none',
                            fontWeight: 'bold',
                            padding: '0.25rem 0.5rem',
                            borderRadius: '8px',
                            border: '1px solid #25D366',
                            background: '#f0fff0',
                            transition: 'all 0.2s ease',
                            cursor: 'pointer',
                            display: 'inline-block'
                          }}
                          title={`–ù–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp: ${normalizedPhone}`}
                        >
                          üì± {normalizedPhone}
                        </a>
                      );
                    } else {
                      return (
                        <span style={{ 
                          color: '#999',
                          fontStyle: 'italic'
                        }}>
                          {order.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}
                        </span>
                      );
                    }
                  } catch (error) {
                    return (
                      <span style={{ 
                        color: '#999',
                        fontStyle: 'italic'
                      }}>
                        {order.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'} (–æ—à–∏–±–∫–∞)
                      </span>
                    );
                  }
                })()}
              </div>
              <div><strong>–ê–¥—Ä–µ—Å:</strong> {order.address}</div>
              {order.comment && (
                <div><strong>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</strong> {order.comment}</div>
              )}
            </div>
          </div>

          <div style={{ marginBottom: '1.5rem' }}>
            <h4 style={{
              fontSize: '1rem',
              fontWeight: 'bold',
              color: '#2c1e0f',
              marginBottom: '0.75rem'
            }}>
              üõí –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞
            </h4>
            <div style={{
              background: '#f8f9fa',
              borderRadius: '8px',
              padding: '1rem'
            }}>
              {products.map((item, index) => (
                <div key={index} style={{
                  display: 'flex',
                  justifyContent: 'space-between',
                  alignItems: 'center',
                  padding: '0.5rem 0',
                  borderBottom: index < products.length - 1 ? '1px solid #e0e0e0' : 'none'
                }}>
                  <div>
                    <div style={{
                      fontWeight: 'bold',
                      color: '#2c1e0f',
                      fontSize: '0.9rem'
                    }}>
                      {item.name}
                      {item.name.includes('‚ö°') && (
                        <span style={{
                          background: '#ff0844',
                          color: 'white',
                          fontSize: '0.7rem',
                          padding: '0.1rem 0.3rem',
                          borderRadius: '4px',
                          marginLeft: '0.5rem'
                        }}>
                          FLASH
                        </span>
                      )}
                      {item.name.includes('üéâ') && (
                        <span style={{
                          background: '#4caf50',
                          color: 'white',
                          fontSize: '0.7rem',
                          padding: '0.1rem 0.3rem',
                          borderRadius: '4px',
                          marginLeft: '0.5rem'
                        }}>
                          –ë–ï–°–ü–õ–ê–¢–ù–û
                        </span>
                      )}
                    </div>
                    <div style={{
                      fontSize: '0.8rem',
                      color: '#666'
                    }}>
                      {item.quantity} √ó {formatNumber(item.price)} ‚ÇΩ
                    </div>
                  </div>
                  <div style={{
                    fontWeight: 'bold',
                    color: '#2c1e0f'
                  }}>
                    {formatNumber(item.price * item.quantity)} ‚ÇΩ
                  </div>
                </div>
              ))}
            </div>
          </div>

          {!isArchived && (
            <div style={{ marginBottom: '1rem' }}>
              <h4 style={{
                fontSize: '1rem',
                fontWeight: 'bold',
                color: '#2c1e0f',
                marginBottom: '0.75rem'
              }}>
                üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å
              </h4>
              <div style={{
                display: 'flex',
                gap: '0.5rem',
                flexWrap: 'wrap'
              }}>
                {statusLabels
                  .filter(status => status.status !== order.status)
                  .map((status) => (
                    <button
                      key={status.status}
                      onClick={() => handleStatusChange(status.status)}
                      disabled={isUpdating}
                      style={{
                        padding: '0.5rem 1rem',
                        background: status.color,
                        color: 'white',
                        border: 'none',
                        borderRadius: '8px',
                        fontSize: '0.9rem',
                        fontWeight: 'bold',
                        cursor: isUpdating ? 'not-allowed' : 'pointer',
                        opacity: isUpdating ? 0.6 : 1
                      }}
                    >
                      {status.label}
                    </button>
                  ))}
              </div>
            </div>
          )}
        </div>
      )}

      <div style={{
        textAlign: 'center',
        marginTop: '0.5rem',
        fontSize: '0.8rem',
        color: '#999',
        cursor: 'pointer'
      }}
      onClick={() => setIsExpanded(!isExpanded)}
      >
        {isExpanded ? '‚ñ≤ –°–≤–µ—Ä–Ω—É—Ç—å' : '‚ñº –ü–æ–¥—Ä–æ–±–Ω–µ–µ'}
      </div>
    </div>
  );
};

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∫–æ–º–ø–æ–Ω–µ–Ω—Ç AdminDashboard —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å–≤–∞–π–ø–∞ –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
const AdminDashboard = ({ admin, onLogout }) => {
  const [orders, setOrders] = useState([]);
  const [statusLabels, setStatusLabels] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [activeFilter, setActiveFilter] = useState('pending'); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "–ù–æ–≤—ã–µ"
  const [lastOrderCount, setLastOrderCount] = useState(0);
  const [autoRefresh, setAutoRefresh] = useState(true);
  const [lastUpdateTime, setLastUpdateTime] = useState(null);
  const [loadError, setLoadError] = useState(null);
  
  // ‚úÖ –ù–û–í–´–ï —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–≤–∞–π–ø–∞ (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –∏–∑ App.jsx)
  const [touchStartX, setTouchStartX] = useState(0);
  const [touchStartY, setTouchStartY] = useState(0);
  const [isSwiping, setIsSwiping] = useState(false);
  const [swipeOffset, setSwipeOffset] = useState(0);
  const [isAnimating, setIsAnimating] = useState(false);

  useEffect(() => {
    loadData();
  }, []);

  useEffect(() => {
    if (!autoRefresh) return;

    const interval = setInterval(() => {
      loadData(true);
    }, 30000);

    return () => clearInterval(interval);
  }, [autoRefresh]);

  const loadData = async (isAutoRefresh = false) => {
    try {
      if (!isAutoRefresh) {
        setIsLoading(true);
        setLoadError(null);
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é fetch
      const [ordersRes, statusRes] = await Promise.all([
        safeFetch(`${API_URL}?action=getOrders&t=${Date.now()}`),
        safeFetch(`${API_URL}?action=getStatusLabels&t=${Date.now()}`)
      ]);

      const ordersData = await ordersRes.json();
      const statusData = await statusRes.json();

      if (Array.isArray(ordersData)) {
        // ‚úÖ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–æ–ª—é date
        const sorted = ordersData.sort((a, b) => {
          if (!a.date && !b.date) return 0;
          if (!a.date) return 1;
          if (!b.date) return -1;
          
          // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã
          const parseDate = (dateStr) => {
            if (!dateStr) return 0;
            try {
              if (typeof dateStr === 'string' && dateStr.includes('.') && dateStr.includes(':') && !dateStr.includes('T')) {
                // –§–æ—Ä–º–∞—Ç: "25.07.2025 19:51:45"
                const [datePart, timePart] = dateStr.split(' ');
                const [day, month, year] = datePart.split('.');
                const [hours, minutes, seconds] = timePart.split(':');
                return new Date(year, month - 1, day, hours, minutes, seconds).getTime();
              } else {
                // ISO —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ Date –æ–±—ä–µ–∫—Ç
                return new Date(dateStr).getTime();
              }
            } catch (error) {
              console.error('Error parsing date for sorting:', error);
              return 0;
            }
          };
          
          return parseDate(b.date) - parseDate(a.date);
        });
        
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ iOS
        if (isAutoRefresh && lastOrderCount > 0 && sorted.length > lastOrderCount) {
          // –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –∑–≤—É–∫–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
          if (window.innerWidth > 768) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–µ
            console.log(`üîî –ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: ${sorted.length - lastOrderCount}`);
          }
        }
        
        setOrders(sorted);
        setLastOrderCount(sorted.length);
        setLastUpdateTime(new Date());
      } else {
        setOrders([]);
        setLastOrderCount(0);
      }

      if (Array.isArray(statusData)) {
        setStatusLabels(statusData);
      } else {
        setStatusLabels([
          { status: 'pending', label: '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ', color: '#ffa500' },
          { status: 'cooking', label: '–ì–æ—Ç–æ–≤–∏—Ç—Å—è', color: '#ff7f32' },
          { status: 'delivering', label: '–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è', color: '#0099ff' },
          { status: 'done', label: '–ó–∞–≤–µ—Ä—à—ë–Ω', color: '#28a745' },
          { status: 'archived', label: '–ê—Ä—Ö–∏–≤', color: '#6c757d' }
        ]);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      if (!isAutoRefresh) {
        setLoadError(error.message);
      }
    } finally {
      if (!isAutoRefresh) {
        setIsLoading(false);
      }
    }
  };

  // ‚úÖ –ù–û–í–´–ï —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–≤–∞–π–ø–∞ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑ App.jsx)
  const handleTouchStart = (e) => {
    if (isAnimating) return;
    setTouchStartX(e.touches[0].clientX);
    setTouchStartY(e.touches[0].clientY);
    setIsSwiping(true);
    setSwipeOffset(0);
  };

  const handleTouchMove = (e) => {
    if (!isSwiping || isAnimating) return;
    
    const currentX = e.touches[0].clientX;
    const currentY = e.touches[0].clientY;
    const deltaX = currentX - touchStartX;
    const deltaY = currentY - touchStartY;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–≤–∞–π–ø
    if (Math.abs(deltaX) > Math.abs(deltaY)) {
      e.preventDefault();
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ—â—É—â–µ–Ω–∏—è
      const maxOffset = window.innerWidth * 0.3;
      const limitedDelta = Math.max(-maxOffset, Math.min(maxOffset, deltaX));
      setSwipeOffset(limitedDelta);
    }
  };

  const handleTouchEnd = (e) => {
    if (!isSwiping || isAnimating) {
      setIsSwiping(false);
      setSwipeOffset(0);
      return;
    }

    const touchEndX = e.changedTouches[0].clientX;
    const touchEndY = e.changedTouches[0].clientY;
    const deltaX = touchEndX - touchStartX;
    const deltaY = touchEndY - touchStartY;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–≤–∞–π–ø —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º
    if (Math.abs(deltaX) > Math.abs(deltaY) && Math.abs(deltaX) > 80) {
      const filterCategories = ['pending', 'active', 'archive'];
      const currentIndex = filterCategories.indexOf(activeFilter);
      let newIndex = currentIndex;

      if (deltaX > 0 && currentIndex > 0) {
        // –°–≤–∞–π–ø –≤–ø—Ä–∞–≤–æ - –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        newIndex = currentIndex - 1;
      } else if (deltaX < 0 && currentIndex < filterCategories.length - 1) {
        // –°–≤–∞–π–ø –≤–ª–µ–≤–æ - —Å–ª–µ–¥—É—é—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        newIndex = currentIndex + 1;
      }

      if (newIndex !== currentIndex) {
        // –ü–ª–∞–≤–Ω–∞—è —Å–º–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        setIsAnimating(true);
        setActiveFilter(filterCategories[newIndex]);
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        setTimeout(() => {
          setSwipeOffset(0);
          setTimeout(() => {
            setIsAnimating(false);
          }, window.innerWidth <= 768 ? 300 : 400); // –ë—ã—Å—Ç—Ä–µ–µ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
        }, 50);
      } else {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –º–µ—Å—Ç–æ
        setSwipeOffset(0);
      }
    } else {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –º–µ—Å—Ç–æ
      setSwipeOffset(0);
    }

    setIsSwiping(false);
  };

  const handleStatusChange = async (orderId, newStatus) => {
    try {
      const response = await safeFetch(`${API_URL}?action=updateOrderStatus&orderId=${orderId}&status=${newStatus}`);
      
      if (response.ok) {
        setOrders(prev => prev.map(order => 
          order.orderId === orderId 
            ? { ...order, status: newStatus }
            : order
        ));
      } else {
        alert('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }
    } catch (error) {
      alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.');
    }
  };

  const filterOrders = (orders, filter) => {
    // –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏ –∞—Ä—Ö–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–∫–ª–∞–¥–æ–∫  
    const activeOrders = orders.filter(order => !['done', 'archived'].includes(order.status));
    
    switch (filter) {
      case 'pending':
        return activeOrders.filter(order => order.status === 'pending');
      case 'active':
        return activeOrders.filter(order => ['cooking', 'delivering'].includes(order.status)); // –£–±—Ä–∞–ª–∏ done
      case 'archive':
        return orders.filter(order => ['done', 'archived'].includes(order.status)); // –ò –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ, –∏ –∞—Ä—Ö–∏–≤–Ω—ã–µ
      default:
        return activeOrders;
    }
  };

  const filteredOrders = filterOrders(orders, activeFilter);
  const pendingCount = orders.filter(order => order.status === 'pending').length;
  const averageTimeStats = calculateAverageTime(orders);
  
  const getMoscowDate = () => {
    const now = new Date();
    const moscowOffset = 3 * 60;
    const localOffset = now.getTimezoneOffset();
    const moscowTime = new Date(now.getTime() + (moscowOffset + localOffset) * 60000);
    return moscowTime.toISOString().split('T')[0];
  };
  
  const todayMoscow = getMoscowDate();
  
  // ‚úÖ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ø–æ–¥—Å—á–µ—Ç –¥–æ—Ö–æ–¥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ –ø–æ–ª—é date
  const totalToday = orders
    .filter(order => {
      if (!order.date) return false;
      try {
        const today = new Date().toISOString().split('T')[0]; // YYYY-MM-DD
        let orderDate;
        
        if (typeof order.date === 'string' && order.date.includes('.') && !order.date.includes('T')) {
          // –§–æ—Ä–º–∞—Ç: "25.07.2025 19:51:45"
          const dateParts = order.date.split(' ')[0].split('.');
          if (dateParts.length === 3) {
            orderDate = `${dateParts[2]}-${dateParts[1]}-${dateParts[0]}`; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ YYYY-MM-DD
          }
        } else {
          // ISO —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ Date –æ–±—ä–µ–∫—Ç
          const dateObj = new Date(order.date);
          orderDate = dateObj.toISOString().split('T')[0];
        }
        
        return orderDate === today;
      } catch (error) {
        return false;
      }
    })
    .reduce((sum, order) => sum + parseInt(order.total || 0), 0);

  const getBotMessage = () => {
    if (pendingCount === 0) {
      return "–ë–æ—Å—Å, –ø–æ–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç, –Ω—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Ä–µ–∫–ª–∞–º—É üìà";
    } else if (pendingCount === 1) {
      return "–ü—Ä–∏–≤–µ—Ç –ë–æ—Å—Å! –£ –Ω–∞—Å —Ç—É—Ç 1 –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø–æ—Å—Ç—É–ø–∏–ª üîî";
    } else {
      return `–ü—Ä–∏–≤–µ—Ç –ë–æ—Å—Å! –£ –Ω–∞—Å —Ç—É—Ç ${pendingCount} –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ—Å—Ç—É–ø–∏–ª–æ üî•`;
    }
  };

  if (isLoading) {
    return (
      <div style={{
        minHeight: '100vh',
        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center'
      }}>
        <div style={{
          background: 'white',
          padding: '2rem',
          borderRadius: '20px',
          textAlign: 'center',
          boxShadow: '0 20px 40px rgba(0,0,0,0.1)'
        }}>
          <div style={{ fontSize: '3rem', marginBottom: '1rem' }}>‚è≥</div>
          <div style={{ fontSize: '1.2rem', fontWeight: 'bold' }}>–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ...</div>
        </div>
      </div>
    );
  }

  if (loadError) {
    return (
      <div style={{
        minHeight: '100vh',
        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        padding: '2rem'
      }}>
        <div style={{
          background: 'white',
          padding: '2rem',
          borderRadius: '20px',
          textAlign: 'center',
          boxShadow: '0 20px 40px rgba(0,0,0,0.1)',
          maxWidth: '400px'
        }}>
          <div style={{ fontSize: '3rem', marginBottom: '1rem' }}>‚ö†Ô∏è</div>
          <div style={{ fontSize: '1.2rem', fontWeight: 'bold', marginBottom: '1rem' }}>
            –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
          </div>
          <div style={{ fontSize: '0.9rem', color: '#666', marginBottom: '2rem' }}>
            {loadError}
          </div>
          <button
            onClick={() => {
              setLoadError(null);
              loadData();
            }}
            style={{
              background: '#667eea',
              color: 'white',
              border: 'none',
              padding: '1rem 2rem',
              borderRadius: '8px',
              cursor: 'pointer',
              fontSize: '1rem'
            }}
          >
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    );
  }

  return (
    <div 
      style={{
        minHeight: '100vh',
        background: 'linear-gradient(135deg, #e3f2fd, #f3e5f5)',
        fontFamily: 'system-ui, -apple-system, sans-serif', // –ë–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è iOS
        overflow: 'hidden' // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª –ø—Ä–∏ —Å–≤–∞–π–ø–µ
      }}
      // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–´ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–≤–∞–π–ø–∞
      onTouchStart={handleTouchStart}
      onTouchMove={handleTouchMove}
      onTouchEnd={handleTouchEnd}
    >
      {/* ‚úÖ –î–û–ë–ê–í–õ–ï–ù–´ —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π */}
      <style>
        {`
          @keyframes fadeInScale {
            0% {
              opacity: 0;
              transform: scale(0.8) translateY(20px);
            }
            100% {
              opacity: 1;
              transform: scale(1) translateY(0);
            }
          }

          @keyframes slideInRight {
            from {
              transform: translateX(100%);
              opacity: 0;
            }
            to {
              transform: translateX(0);
              opacity: 1;
            }
          }

          @keyframes slideInLeft {
            from {
              transform: translateX(-100%);
              opacity: 0;
            }
            to {
              transform: translateX(0);
              opacity: 1;
            }
          }

          .orders-container {
            transition: all 0.2s ease-out;
            will-change: transform;
          }

          .orders-container.swiping {
            transition: none;
          }

          .orders-container.animating {
            transition: all 0.3s ease-out;
          }

          /* –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö */
          @media (max-width: 768px) {
            .orders-container {
              transition: all 0.15s ease-out;
            }
            
            .order-card {
              backface-visibility: hidden;
              transform: translateZ(0);
            }
            
            .admin-header {
              flex-direction: column !important;
              gap: 1rem !important;
              text-align: center !important;
            }
            
            .admin-header h1 {
              font-size: 1.4rem !important;
            }
            
            .filter-button {
              padding: 0.5rem 0.8rem !important;
              font-size: 0.8rem !important;
              flex: 1 !important;
            }
            
            .header-controls {
              flex-direction: row !important;
              flex-wrap: wrap !important;
              width: 100% !important;
              gap: 0.5rem !important;
              justify-content: center !important;
            }
            
            .header-controls > * {
              flex: 0 0 auto !important;
              min-width: fit-content !important;
            }
            
            .today-sum {
              flex: 1 1 100% !important;
              text-align: center !important;
              margin-bottom: 0.5rem !important;
            }
          }
        `}
      </style>
      
      <div className="admin-header" style={{
        background: 'white',
        padding: '1rem 2rem',
        boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center'
      }}>
        <div>
          <h1 style={{
            fontSize: '1.8rem',
            fontWeight: 'bold',
            color: '#2c1e0f',
            margin: 0
          }}>
            üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
          </h1>
          <div style={{
            fontSize: '0.9rem',
            color: '#666'
          }}>
            –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {admin.login}
            {lastUpdateTime && (
              <div style={{ fontSize: '0.7rem', color: '#999' }}>
                –û–±–Ω–æ–≤–ª–µ–Ω–æ: {lastUpdateTime.toLocaleTimeString('ru-RU')}
              </div>
            )}
          </div>
        </div>
        
        <div className="header-controls" style={{ display: 'flex', alignItems: 'center', gap: '1rem', flexWrap: 'wrap' }}>
          <div className="today-sum" style={{
            background: '#e8f5e8',
            color: '#2e7d32',
            padding: '0.5rem 1rem',
            borderRadius: '20px',
            fontSize: '0.9rem',
            fontWeight: 'bold'
          }}>
            –°–µ–≥–æ–¥–Ω—è: {formatNumber(totalToday)} ‚ÇΩ
          </div>

          {averageTimeStats && (
            <div style={{
              background: '#e3f2fd',
              color: '#1976d2',
              padding: '0.5rem 1rem',
              borderRadius: '20px',
              fontSize: '0.9rem',
              fontWeight: 'bold'
            }}>
              ‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ: {averageTimeStats.averageMinutes} –º–∏–Ω ({averageTimeStats.completedCount})
            </div>
          )}
          
          <button
            onClick={() => setAutoRefresh(!autoRefresh)}
            style={{
              background: autoRefresh ? '#4caf50' : '#757575',
              color: 'white',
              border: 'none',
              padding: '0.5rem 1rem',
              borderRadius: '8px',
              cursor: 'pointer',
              fontSize: '0.9rem',
              display: 'flex',
              alignItems: 'center',
              gap: '0.5rem'
            }}
            title={autoRefresh ? '–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ' : '–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ'}
          >
            {autoRefresh ? 'üîÑ' : '‚è∏Ô∏è'} 
            <span style={{ fontSize: '0.8rem' }}>
              {autoRefresh ? '–ê–≤—Ç–æ' : '–í—ã–∫–ª'}
            </span>
          </button>

          <button
            onClick={() => loadData()}
            style={{
              background: '#2196f3',
              color: 'white',
              border: 'none',
              padding: '0.5rem 1rem',
              borderRadius: '8px',
              cursor: 'pointer',
              fontSize: '0.9rem'
            }}
            title="–û–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑—ã"
          >
            ‚Üª
          </button>
          
          <button
            onClick={onLogout}
            style={{
              background: '#ff5722',
              color: 'white',
              border: 'none',
              padding: '0.5rem 1rem',
              borderRadius: '8px',
              cursor: 'pointer',
              fontSize: '0.9rem'
            }}
          >
            –í—ã–π—Ç–∏
          </button>
        </div>
      </div>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≤–Ω–µ sticky-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ */}
      <div style={{
        maxWidth: '800px',
        margin: '0 auto',
        padding: '2rem 2rem 0 2rem'
      }}>
        <div style={{
          background: 'white',
          borderRadius: '20px 20px 20px 5px',
          padding: '1.5rem',
          marginBottom: '2rem',
          boxShadow: '0 4px 12px rgba(0,0,0,0.1)'
        }}>
          <div style={{
            display: 'flex',
            alignItems: 'center',
            gap: '1rem'
          }}>
            <div style={{
              width: '50px',
              height: '50px',
              borderRadius: '50%',
              background: 'linear-gradient(135deg, #667eea, #764ba2)',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              fontSize: '1.5rem'
            }}>
              ü§ñ
            </div>
            <div style={{ flex: 1 }}>
              <div style={{
                fontSize: '1.1rem',
                color: '#2c1e0f',
                lineHeight: '1.4'
              }}>
                {getBotMessage()}
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (sticky) –≤—ã–Ω–µ—Å–µ–Ω—ã –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ */}
      <div style={{
        position: 'sticky',
        top: 0,
        zIndex: 900,
        background: 'linear-gradient(135deg, #e3f2fd, #f3e5f5)',
        padding: '1rem 0',
        boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
        borderBottom: '1px solid rgba(255,255,255,0.2)'
      }}>
        <div style={{
          maxWidth: '800px',
          margin: '0 auto',
          padding: '0 2rem',
          display: 'flex',
          gap: '0.5rem',
          flexWrap: 'wrap'
        }}>
          {[
            { key: 'pending', label: '–ù–æ–≤—ã–µ', count: orders.filter(o => o.status === 'pending').length },
            { key: 'active', label: '–í —Ä–∞–±–æ—Ç–µ', count: orders.filter(o => ['cooking', 'delivering'].includes(o.status)).length },
            { key: 'archive', label: '–ê—Ä—Ö–∏–≤', count: orders.filter(o => ['done', 'archived'].includes(o.status)).length }
          ].map((filter) => (
            <button
              key={filter.key}
              className="filter-button"
              onClick={() => setActiveFilter(filter.key)}
              style={{
                padding: '0.75rem 1.5rem',
                background: activeFilter === filter.key 
                  ? 'linear-gradient(135deg, #667eea, #764ba2)' 
                  : 'white',
                color: activeFilter === filter.key ? 'white' : '#666',
                border: '1px solid #e0e0e0',
                borderRadius: '12px',
                cursor: 'pointer',
                fontSize: '0.9rem',
                fontWeight: 'bold',
                transition: 'all 0.2s ease',
                boxShadow: activeFilter === filter.key ? '0 4px 12px rgba(102, 126, 234, 0.3)' : 'none'
              }}
            >
              {filter.label} ({filter.count})
            </button>
          ))}
        </div>

        {/* ‚úÖ –î–û–ë–ê–í–õ–ï–ù –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–≤–∞–π–ø–∞ –∏ –∞–Ω–∏–º–∞—Ü–∏–π */}
        <div 
          className={`orders-container ${isSwiping && !isAnimating ? 'swiping' : ''} ${isAnimating ? 'animating' : ''}`}
          style={{
            transform: `translateX(${swipeOffset}px)`,
            opacity: isAnimating ? 0.6 : 1,
          }}
        >
        >
          {filteredOrders.length === 0 ? (
            <div style={{
              background: 'white',
              borderRadius: '16px',
              padding: '3rem',
              textAlign: 'center',
              boxShadow: '0 4px 12px rgba(0,0,0,0.1)'
            }}>
              <div style={{ fontSize: '3rem', marginBottom: '1rem' }}>üì≠</div>
              <div style={{ fontSize: '1.2rem', fontWeight: 'bold', color: '#2c1e0f' }}>
                –ó–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç
              </div>
              <div style={{ fontSize: '0.9rem', color: '#666', marginTop: '0.5rem' }}>
                {activeFilter === 'pending' 
                  ? '–ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç'
                  : activeFilter === 'active'
                  ? '–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ'  
                  : '–ê—Ä—Ö–∏–≤ –ø—É—Å—Ç'
                }
              </div>
            </div>
          ) : (
            filteredOrders.map((order, index) => (
              <div
                key={order.orderId}
                className="order-card"
                style={{
                  animationDelay: isAnimating ? `${index * 0.05}s` : '0s',
                  animation: isAnimating ? 'fadeInScale 0.3s ease forwards' : 'none',
                  backfaceVisibility: 'hidden',
                  transform: 'translateZ(0)'
                }}
              >
                <OrderCard
                  order={order}
                  statusLabels={statusLabels}
                  onStatusChange={handleStatusChange}
                />
              </div>
            ))
          )}
        </div>
      </div>
    </div>
  );
};

const AdminPage = () => {
  const [admin, setAdmin] = useState(null);

  useEffect(() => {
    const savedAdmin = localStorage.getItem('admin_session');
    if (savedAdmin) {
      try {
        setAdmin(JSON.parse(savedAdmin));
      } catch (error) {
        localStorage.removeItem('admin_session');
      }
    }
  }, []);

  const handleLoginSuccess = (adminData) => {
    setAdmin(adminData);
    localStorage.setItem('admin_session', JSON.stringify(adminData));
  };

  const handleLogout = () => {
    setAdmin(null);
    localStorage.removeItem('admin_session');
  };

  return admin ? (
    <AdminDashboard admin={admin} onLogout={handleLogout} />
  ) : (
    <AdminLogin onLoginSuccess={handleLoginSuccess} />
  );
};

export default AdminPage;
