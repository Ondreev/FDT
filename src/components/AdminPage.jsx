<div className="order-card" style={{
      background: 'white',
      borderRadius: '16px',
      padding: '1.5rem',
      marginBottom: '1rem',
      boxShadow: '0 4px 12px rgba(0,0,0,0.1)',
      border: isDone ? '2px solid #4caf50' : '1px solid #e0e0e0',
      position: 'relative',
      transition: 'all 0.2s ease'
    }}>
      {/* –ó–µ–ª–µ–Ω–∞—è –≥–∞–ª–æ—á–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö */}
      {isDone && (
        <div style={{
          position: 'absolute',
          top: '-10px',
          right: '-10px',
          background: '#4caf50',
          borderRadius: '50%',
          width: '40px',
          height: '40px',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          fontSize: '1.5rem',
          color: 'white',
          boxShadow: '0 4px 12px rgba(76, 175, 80, 0.3)',
          animation: 'checkmarkBounce 0.5s ease-out'
        }}>
          ‚úì
        </div>
      )}

      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–∫–∞–∑–∞ */}
      <div className="order-header"import { useState, useEffect } from 'react';

const API_URL = 'https://script.google.com/macros/s/AKfycbwpgkiVZN5JwPdSYj-jLVZHZ_A5sw8P6PV4QXR7DJWchwP-19z31WUjcv7QRaHMAazCxg/exec';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–ª–∞ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
const formatNumber = (num) => {
  return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ' ');
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
const formatDate = (dateStr) => {
  const date = new Date(dateStr);
  return date.toLocaleDateString('ru-RU', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–ë–ï–ó –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
const AdminLogin = ({ onLoginSuccess }) => {
  const [password, setPassword] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!password.trim()) {
      setError('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å');
      return;
    }

    setIsLoading(true);
    setError('');

    try {
      const response = await fetch(`${API_URL}?action=getAdmins`);
      const admins = await response.json();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å –ë–ï–ó –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
      const admin = admins.find(admin => 
        admin.passwordHash && admin.passwordHash.trim() === password.trim()
      );
      
      if (admin) {
        onLoginSuccess(admin);
      } else {
        setError('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
      }
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
    }

    setIsLoading(false);
  };

  return (
    <div style={{
      minHeight: '100vh',
      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      padding: '20px'
    }}>
      <div style={{
        background: 'white',
        padding: '2rem',
        borderRadius: '20px',
        boxShadow: '0 20px 40px rgba(0,0,0,0.1)',
        width: '100%',
        maxWidth: '400px',
        textAlign: 'center'
      }}>
        <div style={{ fontSize: '3rem', marginBottom: '1rem' }}>üëë</div>
        <h1 style={{ fontSize: '1.8rem', fontWeight: 'bold', color: '#2c1e0f', marginBottom: '0.5rem' }}>
          –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
        </h1>
        <p style={{ color: '#666', marginBottom: '2rem' }}>
          –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ë–æ—Å—Å!
        </p>

        <form onSubmit={handleSubmit}>
          <div style={{ marginBottom: '1.5rem', textAlign: 'left' }}>
            <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: 'bold', color: '#333' }}>
              –ü–∞—Ä–æ–ª—å
            </label>
            <input
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å..."
              style={{
                width: '100%',
                padding: '1rem',
                border: '2px solid #e0e0e0',
                borderRadius: '12px',
                fontSize: '1rem',
                outline: 'none',
                boxSizing: 'border-box'
              }}
              onFocus={(e) => e.target.style.borderColor = '#667eea'}
              onBlur={(e) => e.target.style.borderColor = '#e0e0e0'}
            />
          </div>

          {error && (
            <div style={{
              background: '#ffebee',
              color: '#c62828',
              padding: '0.75rem',
              borderRadius: '8px',
              marginBottom: '1rem',
              fontSize: '0.9rem'
            }}>
              {error}
            </div>
          )}

          <button
            type="submit"
            disabled={isLoading}
            style={{
              width: '100%',
              padding: '1rem',
              background: isLoading 
                ? 'linear-gradient(135deg, #ccc, #999)' 
                : 'linear-gradient(135deg, #667eea, #764ba2)',
              color: 'white',
              border: 'none',
              borderRadius: '12px',
              fontSize: '1.1rem',
              fontWeight: 'bold',
              cursor: isLoading ? 'not-allowed' : 'pointer',
              transition: 'all 0.2s ease',
              boxShadow: '0 4px 12px rgba(102, 126, 234, 0.3)'
            }}
          >
            {isLoading ? 'üîê –ü—Ä–æ–≤–µ—Ä—è—é...' : 'üöÄ –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É'}
          </button>
        </form>
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–∫–∞–∑–∞
const OrderCard = ({ order, statusLabels, onStatusChange }) => {
  const [isExpanded, setIsExpanded] = useState(false);
  const [isUpdating, setIsUpdating] = useState(false);

  const statusInfo = statusLabels.find(s => s.status === order.status) || 
    { label: order.status, color: '#999' };

  const products = JSON.parse(order.products || '[]');
  const isDone = order.status === 'done';

  const handleStatusChange = async (newStatus) => {
    setIsUpdating(true);
    await onStatusChange(order.orderId, newStatus);
    setIsUpdating(false);
  };

  return (
    <div style={{
      background: 'white',
      borderRadius: '16px',
      padding: '1.5rem',
      marginBottom: '1rem',
      boxShadow: '0 4px 12px rgba(0,0,0,0.1)',
      border: isDone ? '2px solid #4caf50' : '1px solid #e0e0e0',
      position: 'relative',
      transition: 'all 0.2s ease'
    }}>
      {/* –ó–µ–ª–µ–Ω–∞—è –≥–∞–ª–æ—á–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö */}
      {isDone && (
        <div style={{
          position: 'absolute',
          top: '-10px',
          right: '-10px',
          background: '#4caf50',
          borderRadius: '50%',
          width: '40px',
          height: '40px',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          fontSize: '1.5rem',
          color: 'white',
          boxShadow: '0 4px 12px rgba(76, 175, 80, 0.3)',
          animation: 'checkmarkBounce 0.5s ease-out'
        }}>
          ‚úì
        </div>
      )}

      <style>
        {`
          @keyframes checkmarkBounce {
            0% { transform: scale(0); }
            50% { transform: scale(1.2); }
            100% { transform: scale(1); }
          }
        `}
      </style>

      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–∫–∞–∑–∞ */}
      <div className="order-header" style={{
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        marginBottom: '1rem',
        cursor: 'pointer'
      }}
      onClick={() => setIsExpanded(!isExpanded)}
      >
        <div>
          <div className="order-title" style={{
            fontSize: '1.2rem',
            fontWeight: 'bold',
            color: '#2c1e0f',
            marginBottom: '0.25rem'
          }}>
            –ó–∞–∫–∞–∑ #{order.orderId}
          </div>
          <div style={{
            fontSize: '0.9rem',
            color: '#666'
          }}>
            {formatDate(order.date)} ‚Ä¢ {order.customerName}
          </div>
        </div>
        <div style={{
          background: statusInfo.color,
          color: 'white',
          padding: '0.5rem 1rem',
          borderRadius: '20px',
          fontSize: '0.9rem',
          fontWeight: 'bold'
        }}>
          {statusInfo.label}
        </div>
      </div>

      {/* –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <div style={{
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        marginBottom: isExpanded ? '1.5rem' : '0'
      }}>
        <div style={{
          fontSize: '1.1rem',
          fontWeight: 'bold',
          color: '#2c1e0f'
        }}>
          –ò—Ç–æ–≥–æ: {formatNumber(order.total)} ‚ÇΩ
        </div>
        <div style={{
          fontSize: '0.9rem',
          color: '#666'
        }}>
          {products.length} —Ç–æ–≤–∞—Ä{products.length > 1 ? '–∞' : ''}
        </div>
      </div>

      {/* –†–∞–∑–≤–µ—Ä–Ω—É—Ç–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      {isExpanded && (
        <div style={{
          borderTop: '1px solid #f0f0f0',
          paddingTop: '1.5rem',
          animation: 'expandContent 0.3s ease-out'
        }}>
          <style>
            {`
              @keyframes expandContent {
                from { opacity: 0; maxHeight: 0; }
                to { opacity: 1; maxHeight: 500px; }
              }
            `}
          </style>

          {/* –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div style={{ marginBottom: '1.5rem' }}>
            <h4 style={{
              fontSize: '1rem',
              fontWeight: 'bold',
              color: '#2c1e0f',
              marginBottom: '0.75rem'
            }}>
              üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã
            </h4>
            <div style={{ fontSize: '0.9rem', color: '#666', lineHeight: '1.6' }}>
              <div><strong>–ö–ª–∏–µ–Ω—Ç:</strong> {order.customerName}</div>
              <div><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {order.phone}</div>
              <div><strong>–ê–¥—Ä–µ—Å:</strong> {order.address}</div>
              {order.comment && (
                <div><strong>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</strong> {order.comment}</div>
              )}
            </div>
          </div>

          {/* –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ */}
          <div style={{ marginBottom: '1.5rem' }}>
            <h4 style={{
              fontSize: '1rem',
              fontWeight: 'bold',
              color: '#2c1e0f',
              marginBottom: '0.75rem'
            }}>
              üõí –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞
            </h4>
            <div style={{
              background: '#f8f9fa',
              borderRadius: '8px',
              padding: '1rem'
            }}>
              {products.map((item, index) => (
                <div key={index} style={{
                  display: 'flex',
                  justifyContent: 'space-between',
                  alignItems: 'center',
                  padding: '0.5rem 0',
                  borderBottom: index < products.length - 1 ? '1px solid #e0e0e0' : 'none'
                }}>
                  <div>
                    <div style={{
                      fontWeight: 'bold',
                      color: '#2c1e0f',
                      fontSize: '0.9rem'
                    }}>
                      {item.name}
                      {item.name.includes('‚ö°') && (
                        <span style={{
                          background: '#ff0844',
                          color: 'white',
                          fontSize: '0.7rem',
                          padding: '0.1rem 0.3rem',
                          borderRadius: '4px',
                          marginLeft: '0.5rem'
                        }}>
                          FLASH
                        </span>
                      )}
                      {item.name.includes('üéâ') && (
                        <span style={{
                          background: '#4caf50',
                          color: 'white',
                          fontSize: '0.7rem',
                          padding: '0.1rem 0.3rem',
                          borderRadius: '4px',
                          marginLeft: '0.5rem'
                        }}>
                          –ë–ï–°–ü–õ–ê–¢–ù–û
                        </span>
                      )}
                    </div>
                    <div style={{
                      fontSize: '0.8rem',
                      color: '#666'
                    }}>
                      {item.quantity} √ó {formatNumber(item.price)} ‚ÇΩ
                    </div>
                  </div>
                  <div style={{
                    fontWeight: 'bold',
                    color: '#2c1e0f'
                  }}>
                    {formatNumber(item.price * item.quantity)} ‚ÇΩ
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ */}
          {!isDone && (
            <div style={{ marginBottom: '1rem' }}>
              <h4 style={{
                fontSize: '1rem',
                fontWeight: 'bold',
                color: '#2c1e0f',
                marginBottom: '0.75rem'
              }}>
                üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å
              </h4>
              <div className="status-buttons" style={{
                display: 'flex',
                gap: '0.5rem',
                flexWrap: 'wrap'
              }}>
                {statusLabels
                  .filter(status => status.status !== order.status)
                  .map((status) => (
                    <button
                      key={status.status}
                      className="status-button"
                      onClick={() => handleStatusChange(status.status)}
                      disabled={isUpdating}
                      style={{
                        padding: '0.5rem 1rem',
                        background: status.color,
                        color: 'white',
                        border: 'none',
                        borderRadius: '8px',
                        fontSize: '0.9rem',
                        fontWeight: 'bold',
                        cursor: isUpdating ? 'not-allowed' : 'pointer',
                        opacity: isUpdating ? 0.6 : 1,
                        transition: 'all 0.2s ease'
                      }}
                      onMouseEnter={(e) => {
                        if (!isUpdating) {
                          e.target.style.opacity = '0.8';
                        }
                      }}
                      onMouseLeave={(e) => {
                        if (!isUpdating) {
                          e.target.style.opacity = '1';
                        }
                      }}
                    >
                      {status.label}
                    </button>
                  ))}
              </div>
            </div>
          )}
        </div>
      )}

      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è */}
      <div style={{
        textAlign: 'center',
        marginTop: '0.5rem',
        fontSize: '0.8rem',
        color: '#999',
        cursor: 'pointer'
      }}
      onClick={() => setIsExpanded(!isExpanded)}
      >
        {isExpanded ? '‚ñ≤ –°–≤–µ—Ä–Ω—É—Ç—å' : '‚ñº –ü–æ–¥—Ä–æ–±–Ω–µ–µ'}
      </div>
    </div>
  );
};

// –û—Å–Ω–æ–≤–Ω–∞—è –∞–¥–º–∏–Ω–∫–∞ —Å –∑–∞–∫–∞–∑–∞–º–∏
const AdminDashboard = ({ admin, onLogout }) => {
  const [orders, setOrders] = useState([]);
  const [statusLabels, setStatusLabels] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [activeFilter, setActiveFilter] = useState('all');
  const [isTyping, setIsTyping] = useState(true);
  const [loadError, setLoadError] = useState(null);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∑–∞–∫–∞–∑—ã –∏ —Å—Ç–∞—Ç—É—Å—ã...');
      console.log('üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π API URL:', API_URL);
      
      // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
      let ordersData = null;
      const orderActions = ['getOrders'];
      
      for (const action of orderActions) {
        try {
          const fullUrl = `${API_URL}?action=${action}&cache=${Date.now()}`;
          console.log(`üîç –ó–∞–ø—Ä–æ—Å –∫: ${fullUrl}`);
          
          const response = await fetch(fullUrl);
          const data = await response.json();
          
          console.log(`üì¶ –û—Ç–≤–µ—Ç –æ—Ç ${action}:`, data);
          
          if (!data.error) {
            console.log(`‚úÖ –î–µ–π—Å—Ç–≤–∏–µ ${action} —Ä–∞–±–æ—Ç–∞–µ—Ç!`);
            ordersData = data;
            break;
          } else {
            console.log(`‚ùå –î–µ–π—Å—Ç–≤–∏–µ ${action} –≤–µ—Ä–Ω—É–ª–æ –æ—à–∏–±–∫—É:`, data.error);
          }
        } catch (err) {
          console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ ${action}:`, err.message);
        }
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã (—ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç)
      const statusRes = await fetch(`${API_URL}?action=getStatusLabels&cache=${Date.now()}`);
      const statusData = await statusRes.json();

      console.log('üìã –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:', ordersData);
      console.log('üè∑Ô∏è –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã:', statusData);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã
      if (!ordersData || ordersData.error) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤.');
        setOrders([]);
      } else if (Array.isArray(ordersData)) {
        console.log('‚úÖ –ó–∞–∫–∞–∑—ã –ø–æ–ª—É—á–µ–Ω—ã –∫–∞–∫ –º–∞—Å—Å–∏–≤, —Å–æ—Ä—Ç–∏—Ä—É—é...');
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–ù–û–í–´–ï –°–í–ï–†–•–£) - –±–æ–ª—å—à–µ –¥–∞—Ç–∞ = –≤—ã—à–µ
        const sorted = ordersData.sort((a, b) => new Date(b.date) - new Date(a.date));
        setOrders(sorted);
        console.log('‚úÖ –ó–∞–∫–∞–∑–æ–≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ:', sorted.length);
      } else if (ordersData.orders && Array.isArray(ordersData.orders)) {
        console.log('‚úÖ –ó–∞–∫–∞–∑—ã –Ω–∞–π–¥–µ–Ω—ã –≤ ordersData.orders');
        setOrders(ordersData.orders.sort((a, b) => new Date(b.date) - new Date(a.date)));
      } else if (ordersData.data && Array.isArray(ordersData.data)) {
        console.log('‚úÖ –ó–∞–∫–∞–∑—ã –Ω–∞–π–¥–µ–Ω—ã –≤ ordersData.data');
        setOrders(ordersData.data.sort((a, b) => new Date(b.date) - new Date(a.date)));
      } else {
        console.log('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–∫–∞–∑–æ–≤:', ordersData);
        setOrders([]);
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã
      if (!Array.isArray(statusData)) {
        console.error('‚ùå –°—Ç–∞—Ç—É—Å—ã –Ω–µ —è–≤–ª—è—é—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º:', statusData);
        
        if (statusData && statusData.statuses && Array.isArray(statusData.statuses)) {
          setStatusLabels(statusData.statuses);
        } else if (statusData && statusData.data && Array.isArray(statusData.data)) {
          setStatusLabels(statusData.data);
        } else {
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã
          setStatusLabels([
            { status: 'pending', label: '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ', color: '#ffa500' },
            { status: 'cooking', label: '–ì–æ—Ç–æ–≤–∏—Ç—Å—è', color: '#ff7f32' },
            { status: 'delivering', label: '–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è', color: '#0099ff' },
            { status: 'done', label: '–ó–∞–≤–µ—Ä—à—ë–Ω', color: '#28a745' },
            { status: 'archived', label: '–ê—Ä—Ö–∏–≤', color: '#6c757d' }
          ]);
        }
      } else {
        setStatusLabels(statusData);
      }
      
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      setLoadError(error.message);
    } finally {
      setIsLoading(false);
      setTimeout(() => setIsTyping(false), 2000);
    }
  };

  const handleStatusChange = async (orderId, newStatus) => {
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
      const response = await fetch(`${API_URL}?action=updateOrderStatus&orderId=${orderId}&status=${newStatus}`, {
        method: 'POST'
      });
      
      if (response.ok) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª —É—Å–ø–µ—à–Ω–æ
        setOrders(prev => prev.map(order => 
          order.orderId === orderId 
            ? { ...order, status: newStatus }
            : order
        ));
        console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ${orderId} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${newStatus}`);
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
        alert('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
      alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.');
    }
  };

  const filterOrders = (orders, filter) => {
    switch (filter) {
      case 'pending':
        return orders.filter(order => order.status === 'pending');
      case 'active':
        return orders.filter(order => ['pending', 'cooking', 'delivering'].includes(order.status));
      case 'done':
        return orders.filter(order => order.status === 'done');
      default:
        return orders;
    }
  };

  const filteredOrders = filterOrders(orders, activeFilter);
  const pendingCount = orders.filter(order => order.status === 'pending').length;
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—á–µ—Ç —Å—É–º–º—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è —Å —É—á–µ—Ç–æ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
  const getMoscowDate = () => {
    const now = new Date();
    const moscowOffset = 3 * 60; // –ú–æ—Å–∫–≤–∞ UTC+3
    const localOffset = now.getTimezoneOffset();
    const moscowTime = new Date(now.getTime() + (moscowOffset + localOffset) * 60000);
    return moscowTime.toISOString().split('T')[0]; // YYYY-MM-DD
  };
  
  const todayMoscow = getMoscowDate();
  const totalToday = orders
    .filter(order => {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∑–∞–∫–∞–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      const orderDate = new Date(order.date).toISOString().split('T')[0];
      return orderDate === todayMoscow;
    })
    .reduce((sum, order) => sum + parseInt(order.total || 0), 0);

  const getBotMessage = () => {
    if (pendingCount === 0) {
      return "–ë–æ—Å—Å, –ø–æ–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç, –Ω—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Ä–µ–∫–ª–∞–º—É üìà";
    } else if (pendingCount === 1) {
      return "–ü—Ä–∏–≤–µ—Ç –ë–æ—Å—Å! –£ –Ω–∞—Å —Ç—É—Ç 1 –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø–æ—Å—Ç—É–ø–∏–ª üîî";
    } else {
      return `–ü—Ä–∏–≤–µ—Ç –ë–æ—Å—Å! –£ –Ω–∞—Å —Ç—É—Ç ${pendingCount} –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ—Å—Ç—É–ø–∏–ª–æ üî•`;
    }
  };

  if (isLoading) {
    return (
      <div style={{
        minHeight: '100vh',
        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center'
      }}>
        <div style={{
          background: 'white',
          padding: '2rem',
          borderRadius: '20px',
          textAlign: 'center',
          boxShadow: '0 20px 40px rgba(0,0,0,0.1)'
        }}>
          <div style={{ fontSize: '3rem', marginBottom: '1rem' }}>‚è≥</div>
          <div style={{ fontSize: '1.2rem', fontWeight: 'bold' }}>–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ...</div>
        </div>
      </div>
    );
  }

  return (
    <div style={{
      minHeight: '100vh',
      background: 'linear-gradient(135deg, #e3f2fd, #f3e5f5)',
      fontFamily: 'Fredoka, sans-serif'
    }}>
      <style>
        {`
          @keyframes checkmarkBounce {
            0% { transform: scale(0); }
            50% { transform: scale(1.2); }
            100% { transform: scale(1); }
          }
          
          @keyframes expandContent {
            from { opacity: 0; maxHeight: 0; }
            to { opacity: 1; maxHeight: 500px; }
          }
          
          @keyframes typing {
            0%, 60%, 100% {
              transform: translateY(0);
              opacity: 0.4;
            }
            30% {
              transform: translateY(-8px);
              opacity: 1;
            }
          }
          
          @media (max-width: 768px) {
            .admin-header {
              flex-direction: column !important;
              gap: 1rem !important;
              text-align: center !important;
            }
            
            .admin-header h1 {
              fontSize: 1.4rem !important;
            }
            
            .admin-header-actions {
              flex-direction: column !important;
              width: 100% !important;
            }
            
            .admin-container {
              padding: 1rem !important;
            }
            
            .filters-container {
              gap: 0.3rem !important;
            }
            
            .filter-button {
              padding: 0.5rem 0.8rem !important;
              fontSize: 0.8rem !important;
              flex: 1 !important;
              min-width: 0 !important;
              white-space: nowrap !important;
            }
            
            .order-card {
              padding: 1rem !important;
            }
            
            .order-header {
              flex-direction: column !important;
              align-items: flex-start !important;
              gap: 0.5rem !important;
            }
            
            .order-title {
              fontSize: 1rem !important;
            }
            
            .status-buttons {
              gap: 0.3rem !important;
            }
            
            .status-button {
              padding: 0.4rem 0.8rem !important;
              fontSize: 0.8rem !important;
              flex: 1 !important;
              min-width: 0 !important;
            }
            
            .bot-message {
              padding: 1rem !important;
              margin-bottom: 1rem !important;
            }
            
            .bot-avatar {
              width: 40px !important;
              height: 40px !important;
              fontSize: 1.2rem !important;
            }
            
            .bot-text {
              fontSize: 1rem !important;
            }
          }
        `}
      </style>
      
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="admin-header" style={{
        background: 'white',
        padding: '1rem 2rem',
        boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center'
      }}>
        <div>
          <h1 style={{
            fontSize: '1.8rem',
            fontWeight: 'bold',
            color: '#2c1e0f',
            margin: 0
          }}>
            üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
          </h1>
          <div style={{
            fontSize: '0.9rem',
            color: '#666'
          }}>
            –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {admin.login}
          </div>
        </div>
        
        <div className="admin-header-actions" style={{ display: 'flex', alignItems: 'center', gap: '1rem' }}>
          <div style={{
            background: '#e8f5e8',
            color: '#2e7d32',
            padding: '0.5rem 1rem',
            borderRadius: '20px',
            fontSize: '0.9rem',
            fontWeight: 'bold'
          }}>
            –°–µ–≥–æ–¥–Ω—è: {formatNumber(totalToday)} ‚ÇΩ
          </div>
          <button
            onClick={onLogout}
            style={{
              background: '#ff5722',
              color: 'white',
              border: 'none',
              padding: '0.5rem 1rem',
              borderRadius: '8px',
              cursor: 'pointer',
              fontSize: '0.9rem'
            }}
          >
            –í—ã–π—Ç–∏
          </button>
        </div>
      </div>

      <div className="admin-container" style={{
        maxWidth: '800px',
        margin: '0 auto',
        padding: '2rem'
      }}>
        {/* –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –±–æ—Ç–∞ */}
        <div className="bot-message" style={{
          background: 'white',
          borderRadius: '20px 20px 20px 5px',
          padding: '1.5rem',
          marginBottom: '2rem',
          boxShadow: '0 4px 12px rgba(0,0,0,0.1)',
          position: 'relative'
        }}>
          <div style={{
            display: 'flex',
            alignItems: 'center',
            gap: '1rem'
          }}>
            <div className="bot-avatar" style={{
              width: '50px',
              height: '50px',
              borderRadius: '50%',
              background: 'linear-gradient(135deg, #667eea, #764ba2)',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              fontSize: '1.5rem'
            }}>
              ü§ñ
            </div>
            <div style={{ flex: 1 }}>
              {isTyping ? (
                <div style={{
                  display: 'flex',
                  gap: '3px',
                  alignItems: 'center'
                }}>
                  <span>–ü–µ—á–∞—Ç–∞—é</span>
                  <div style={{
                    width: '6px',
                    height: '6px',
                    borderRadius: '50%',
                    background: '#999',
                    animation: 'typing 1.4s infinite ease-in-out'
                  }} />
                  <div style={{
                    width: '6px',
                    height: '6px',
                    borderRadius: '50%',
                    background: '#999',
                    animation: 'typing 1.4s infinite ease-in-out 0.2s'
                  }} />
                  <div style={{
                    width: '6px',
                    height: '6px',
                    borderRadius: '50%',
                    background: '#999',
                    animation: 'typing 1.4s infinite ease-in-out 0.4s'
                  }} />
                </div>
              ) : (
                <div className="bot-text" style={{
                  fontSize: '1.1rem',
                  color: '#2c1e0f',
                  lineHeight: '1.4'
                }}>
                  {getBotMessage()}
                </div>
              )}
            </div>
          </div>
        </div>

        {/* –§–∏–ª—å—Ç—Ä—ã */}
        <div className="filters-container" style={{
          display: 'flex',
          gap: '0.5rem',
          marginBottom: '2rem',
          flexWrap: 'wrap'
        }}>
          {[
            { key: 'all', label: '–í—Å–µ –∑–∞–∫–∞–∑—ã', count: orders.length },
            { key: 'pending', label: '–ù–æ–≤—ã–µ', count: orders.filter(o => o.status === 'pending').length },
            { key: 'active', label: '–í —Ä–∞–±–æ—Ç–µ', count: orders.filter(o => ['cooking', 'delivering'].includes(o.status)).length },
            { key: 'done', label: '–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ', count: orders.filter(o => o.status === 'done').length }
          ].map((filter) => (
            <button
              key={filter.key}
              className="filter-button"
              onClick={() => setActiveFilter(filter.key)}
              style={{
                padding: '0.75rem 1.5rem',
                background: activeFilter === filter.key 
                  ? 'linear-gradient(135deg, #667eea, #764ba2)' 
                  : 'white',
                color: activeFilter === filter.key ? 'white' : '#666',
                border: '1px solid #e0e0e0',
                borderRadius: '12px',
                cursor: 'pointer',
                fontSize: '0.9rem',
                fontWeight: 'bold',
                transition: 'all 0.2s ease',
                boxShadow: activeFilter === filter.key ? '0 4px 12px rgba(102, 126, 234, 0.3)' : 'none'
              }}
            >
              {filter.label} ({filter.count})
            </button>
          ))}
        </div>

        {/* –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ */}
        {loadError ? (
          <div style={{
            background: 'white',
            borderRadius: '16px',
            padding: '3rem',
            textAlign: 'center',
            boxShadow: '0 4px 12px rgba(0,0,0,0.1)',
            border: '2px solid #ff5722'
          }}>
            <div style={{ fontSize: '3rem', marginBottom: '1rem' }}>‚ö†Ô∏è</div>
            <div style={{ fontSize: '1.2rem', fontWeight: 'bold', color: '#d32f2f', marginBottom: '1rem' }}>
              –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            </div>
            <div style={{ fontSize: '0.9rem', color: '#666', marginBottom: '2rem' }}>
              {loadError}
            </div>
            <div style={{ display: 'flex', gap: '1rem', justifyContent: 'center', flexWrap: 'wrap' }}>
              <button
                onClick={() => {
                  setLoadError(null);
                  setIsLoading(true);
                  loadData();
                }}
                style={{
                  padding: '1rem 2rem',
                  background: '#ff5722',
                  color: 'white',
                  border: 'none',
                  borderRadius: '8px',
                  cursor: 'pointer',
                  fontSize: '1rem'
                }}
              >
                –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
              </button>
              
              <button
                onClick={() => {
                  const testUrl = `${API_URL}?action=getOrders`;
                  window.open(testUrl, '_blank');
                }}
                style={{
                  padding: '1rem 2rem',
                  background: '#007bff',
                  color: 'white',
                  border: 'none',
                  borderRadius: '8px',
                  cursor: 'pointer',
                  fontSize: '1rem'
                }}
              >
                –ü—Ä–æ–≤–µ—Ä–∏—Ç—å API
              </button>
              
              <button
                onClick={() => {
                  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                  const testOrder = {
                    orderId: `TEST${Date.now()}`,
                    customerName: '–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç',
                    phone: '+7 999 123-45-67',
                    address: '—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 1',
                    comment: '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∫–∏',
                    products: JSON.stringify([
                      {id: 1, name: '–ü–∏—Ü—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞', price: 450, quantity: 2},
                      {id: 'delivery_service', name: '–î–æ—Å—Ç–∞–≤–∫–∞', price: 250, quantity: 1}
                    ]),
                    total: 1150,
                    status: 'pending',
                    date: new Date().toISOString().split('T')[0]
                  };
                  
                  setOrders([testOrder]);
                  setLoadError(null);
                }}
                style={{
                  padding: '1rem 2rem',
                  background: '#28a745',
                  color: 'white',
                  border: 'none',
                  borderRadius: '8px',
                  cursor: 'pointer',
                  fontSize: '1rem'
                }}
              >
                –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑
              </button>
            </div>
          </div>
        ) : filteredOrders.length === 0 ? (
          <div style={{
            background: 'white',
            borderRadius: '16px',
            padding: '3rem',
            textAlign: 'center',
            boxShadow: '0 4px 12px rgba(0,0,0,0.1)'
          }}>
            <div style={{ fontSize: '3rem', marginBottom: '1rem' }}>üì≠</div>
            <div style={{ fontSize: '1.2rem', fontWeight: 'bold', color: '#2c1e0f' }}>
              –ó–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç
            </div>
            <div style={{ fontSize: '0.9rem', color: '#666', marginTop: '0.5rem' }}>
              {activeFilter === 'all' 
                ? '–ü–æ–∫–∞ —á—Ç–æ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –ø–æ—Å—Ç—É–ø–∞–ª–æ'
                : `–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${['pending', 'active', 'done'].find(f => f === activeFilter) || '–≤—Å–µ'}" –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç`
              }
            </div>
          </div>
        ) : (
          filteredOrders.map((order) => (
            <OrderCard
              key={order.orderId}
              order={order}
              statusLabels={statusLabels}
              onStatusChange={handleStatusChange}
            />
          ))
        )}
      </div>
    </div>
  );
};

// –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∞–¥–º–∏–Ω–∫–∏
const AdminPage = () => {
  const [admin, setAdmin] = useState(null);

  useEffect(() => {
    const savedAdmin = localStorage.getItem('admin_session');
    if (savedAdmin) {
      try {
        setAdmin(JSON.parse(savedAdmin));
      } catch (error) {
        localStorage.removeItem('admin_session');
      }
    }
  }, []);

  const handleLoginSuccess = (adminData) => {
    setAdmin(adminData);
    localStorage.setItem('admin_session', JSON.stringify(adminData));
  };

  const handleLogout = () => {
    setAdmin(null);
    localStorage.removeItem('admin_session');
  };

  return admin ? (
    <AdminDashboard admin={admin} onLogout={handleLogout} />
  ) : (
    <AdminLogin onLoginSuccess={handleLoginSuccess} />
  );
};

export default AdminPage;
