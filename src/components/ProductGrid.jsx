import React, { useState, useEffect } from 'react';
import ProductCard from './ProductCard';

const ProductGrid = ({ 
  products, 
  categories, 
  activeCategory, 
  settings, 
  cart, 
  onAddToCart, 
  onUpdateQuantity, 
  onRemoveFromCart, 
  onRatingClick 
}) => {
  // ‚úÖ –°–û–°–¢–û–Ø–ù–ò–ï –î–õ–Ø –õ–ï–ù–ò–í–û–ô –ó–ê–ì–†–£–ó–ö–ò –ö–ê–¢–ï–ì–û–†–ò–ô –í –†–ê–ó–î–ï–õ–ï "–í–°–ï"
  const [visibleCategoriesCount, setVisibleCategoriesCount] = useState(1);

  // ‚úÖ –°–ë–†–ê–°–´–í–ê–ï–ú –°–ß–ï–¢–ß–ò–ö –ö–ê–¢–ï–ì–û–†–ò–ô –ü–†–ò –°–ú–ï–ù–ï –ê–ö–¢–ò–í–ù–û–ô –ö–ê–¢–ï–ì–û–†–ò–ò
  useEffect(() => {
    if (activeCategory === null) {
      setVisibleCategoriesCount(1);
    }
  }, [activeCategory]);

  // ‚úÖ –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê–ì–†–£–ó–ö–ò –°–õ–ï–î–£–Æ–©–ï–ô –ö–ê–¢–ï–ì–û–†–ò–ò
  const handleLoadMore = () => {
    setVisibleCategoriesCount(prev => prev + 1);
  };

  // ‚úÖ –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –û–¢–§–ò–õ–¨–¢–†–û–í–ê–ù–ù–´–• –¢–û–í–ê–†–û–í
  const getFilteredProducts = () => {
    if (activeCategory) {
      // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –µ—ë —Ç–æ–≤–∞—Ä—ã
      return products.filter((p) => p.category === activeCategory);
    } else {
      // –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª "–í–°–ï" - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Ç–æ–ª—å–∫–æ –∏–∑ –≤–∏–¥–∏–º—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      const visibleCategories = categories.slice(0, visibleCategoriesCount);
      const visibleCategoryIds = visibleCategories.map(cat => cat.id);
      return products.filter(product => visibleCategoryIds.includes(product.category));
    }
  };

  const filteredProducts = getFilteredProducts();

  return (
    <>
      <style>
        {`
          .product-grid {
            display: grid;
            gap: 1rem;
            grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
          }

          /* ‚úÖ –°–¢–ò–õ–ò –î–õ–Ø –°–ï–¢–û–í (—Ç–æ–≤–∞—Ä—ã —Å –±—É–∫–≤–æ–π S) */
          .product-card-set {
            grid-column: span 2;
            max-width: none;
          }

          /* –ù–∞ –æ—á–µ–Ω—å —É–∑–∫–∏—Ö —ç–∫—Ä–∞–Ω–∞—Ö —Å–µ—Ç—ã –∑–∞–Ω–∏–º–∞—é—Ç –≤—Å—é —à–∏—Ä–∏–Ω—É */
          @media (max-width: 400px) {
            .product-grid {
              grid-template-columns: repeat(auto-fill, minmax(140px, 1fr)) !important;
            }
            .product-card-set {
              grid-column: span 2;
            }
          }

          /* –ù–∞ —Å—Ä–µ–¥–Ω–∏—Ö —ç–∫—Ä–∞–Ω–∞—Ö (–ø–ª–∞–Ω—à–µ—Ç—ã) */
          @media (min-width: 401px) and (max-width: 768px) {
            .product-card-set {
              grid-column: span 2;
            }
          }

          /* –ù–∞ –¥–µ—Å–∫—Ç–æ–ø–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 2 –∫–æ–ª–æ–Ω–∫–∞–º–∏ –¥–ª—è —Å–µ—Ç–æ–≤ */
          @media (min-width: 769px) {
            .product-card-set {
              grid-column: span 2;
              max-width: calc(2 * 180px + 1rem);
            }
          }
        `}
      </style>
      
      <div className="product-grid">
      {activeCategory ? (
        // ‚úÖ –ü–û–ö–ê–ó–´–í–ê–ï–ú –¢–û–í–ê–†–´ –ö–û–ù–ö–†–ï–¢–ù–û–ô –ö–ê–¢–ï–ì–û–†–ò–ò (–ö–ê–ö –†–ê–ù–¨–®–ï)
        filteredProducts.map((product, index) => (
          <div
            key={product.id}
            className={String(product.id).includes('S') ? 'product-card-set' : ''}
          >
            <ProductCard
              product={product}
              settings={settings}
              cart={cart}
              onAddToCart={onAddToCart}
              onUpdateQuantity={onUpdateQuantity}
              onRemoveFromCart={onRemoveFromCart}
              onRatingClick={onRatingClick}
            />
          </div>
        ))
      ) : (
        // ‚úÖ –†–ê–ó–î–ï–õ "–í–°–ï" –° –õ–ï–ù–ò–í–û–ô –ó–ê–ì–†–£–ó–ö–û–ô
        <>
          {categories.slice(0, visibleCategoriesCount).map((category, categoryIndex) => {
            const categoryProducts = products.filter(p => p.category === category.id);
            if (categoryProducts.length === 0) return null;

            return (
              <React.Fragment key={category.id}>
                {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
                <div style={{
                  gridColumn: '1 / -1',
                  marginTop: categoryIndex > 0 ? '2rem' : '1rem',
                  marginBottom: '1rem'
                }}>
                  <h3 style={{
                    fontSize: '1.8rem',
                    fontWeight: 'bold',
                    color: '#2c1e0f',
                    margin: 0,
                    textAlign: 'center',
                    fontFamily: settings.font || 'Fredoka'
                  }}>
                    {category.name}
                  </h3>
                </div>
                
                {/* –¢–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
                {categoryProducts.map((product) => (
                  <div
                    key={product.id}
                    className={String(product.id).includes('S') ? 'product-card-set' : ''}
                  >
                    <ProductCard
                      product={product}
                      settings={settings}
                      cart={cart}
                      onAddToCart={onAddToCart}
                      onUpdateQuantity={onUpdateQuantity}
                      onRemoveFromCart={onRemoveFromCart}
                      onRatingClick={onRatingClick}
                    />
                  </div>
                ))}
              </React.Fragment>
            );
          })}

          {/* ‚úÖ –ö–ù–û–ü–ö–ê "–°–ú–û–¢–†–ï–¢–¨ –ï–©–ï" –ò–õ–ò –§–ò–ù–ê–õ–¨–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï */}
          <div style={{
            gridColumn: '1 / -1',
            display: 'flex',
            justifyContent: 'center',
            marginTop: '2rem'
          }}>
            {visibleCategoriesCount < categories.length ? (
              <button
                onClick={handleLoadMore}
                style={{
                  background: settings.primaryColor || '#ff7f32',
                  color: 'white',
                  border: 'none',
                  padding: '1rem 2rem',
                  borderRadius: '20px',
                  fontSize: '1.1rem',
                  fontWeight: 'bold',
                  cursor: 'pointer',
                  fontFamily: settings.font || 'Fredoka',
                  boxShadow: '0 4px 12px rgba(0,0,0,0.15)',
                  transition: 'transform 0.2s ease',
                }}
                onMouseDown={(e) => e.target.style.transform = 'scale(0.95)'}
                onMouseUp={(e) => e.target.style.transform = 'scale(1)'}
                onMouseLeave={(e) => e.target.style.transform = 'scale(1)'}
              >
                –°–º–æ—Ç—Ä–µ—Ç—å –µ—â–µ
              </button>
            ) : (
              <div style={{
                textAlign: 'center',
                padding: '2rem',
                background: '#fff7ed',
                borderRadius: '20px',
                boxShadow: '0 4px 12px rgba(0,0,0,0.04)'
              }}>
                <div style={{ fontSize: '3rem', marginBottom: '1rem' }}>üçΩÔ∏è</div>
                <p style={{
                  fontSize: '1.3rem',
                  fontWeight: 'bold',
                  color: '#2c1e0f',
                  margin: 0,
                  fontFamily: settings.font || 'Fredoka'
                }}>
                  –ù—É —ç—Ç–æ –≤—Å–µ –Ω–∞—à–µ –º–µ–Ω—é, –ì–æ—Ç–æ–≤ –∑–∞–∫–∞–∑–∞—Ç—å?
                </p>
              </div>
            )}
          </div>
        </>
      )}
    </div>
    </>
  );
};

export default ProductGrid;
